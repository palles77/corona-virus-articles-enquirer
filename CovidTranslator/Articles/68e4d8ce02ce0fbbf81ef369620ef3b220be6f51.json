{
    "paper_id": "68e4d8ce02ce0fbbf81ef369620ef3b220be6f51",
    "metadata": {
        "title": "Language model-based automatic prefix abbreviation expansion method for biomedical big data analysis",
        "authors": [
            {
                "first": "Xiaokun",
                "middle": [],
                "last": "Du",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "South-Central University for Nationalities",
                    "location": {
                        "settlement": "Wuhan",
                        "country": "China"
                    }
                },
                "email": ""
            },
            {
                "first": "Rongbo",
                "middle": [],
                "last": "Zhu",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "South-Central University for Nationalities",
                    "location": {
                        "settlement": "Wuhan",
                        "country": "China"
                    }
                },
                "email": ""
            },
            {
                "first": "Yanhong",
                "middle": [],
                "last": "Li",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "South-Central University for Nationalities",
                    "location": {
                        "settlement": "Wuhan",
                        "country": "China"
                    }
                },
                "email": ""
            },
            {
                "first": "Ashiq",
                "middle": [],
                "last": "Anjum",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "University of Derby",
                    "location": {
                        "settlement": "Derby",
                        "country": "UK"
                    }
                },
                "email": ""
            }
        ]
    },
    "abstract": [],
    "body_text": [
        {
            "text": "Big data analysis has opened the door to a new era in biomedical fields, such as healthcare [1] and disease diagnosis [2, 3] , etc. Abbreviations are appearing more and more frequently in these areas, which significantly hinders development in related research fields such as biomedical text analysis [4, 5] , large biomedical ontologies [6] . Abbreviations are used in almost all types of data (structured, semi-structured, unstructured). Regarding unstructured data, Ammar et al. [7] have informed that English Wikipedia articles contain an average of 9.7 abbreviations per article and that more than 63% of the articles contain at least one abbreviation. At the sentence level, over 27% of sentences in news articles contain abbreviations. In the biomedical domain, the situation is becoming worse. Clinical narratives are typically produced under time pressure, which incites the use of abbreviations and acronyms [8] . A study focused on the electronic discharge summaries from a large, tertiary teaching hospital in Australia revealed that abbreviations were common, occurring at a frequency of one in five words [9] . For structural (e.g., relational databases, etc.) and semi-structural data (e.g., XML (Extensive Markup Language), knowledge graph etc.), abbreviations are widely used for element names since the identifier length is limited (for example, the identifier length is limited to less than 30 characters in Oracle). Abbreviations are substantial obstacles in related fields such as ontology matching [10] and knowledge map construction.",
            "cite_spans": [
                {
                    "start": 92,
                    "end": 95,
                    "text": "[1]",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 118,
                    "end": 121,
                    "text": "[2,",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 122,
                    "end": 124,
                    "text": "3]",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 301,
                    "end": 304,
                    "text": "[4,",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 305,
                    "end": 307,
                    "text": "5]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 338,
                    "end": 341,
                    "text": "[6]",
                    "ref_id": "BIBREF5"
                },
                {
                    "start": 482,
                    "end": 485,
                    "text": "[7]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 918,
                    "end": 921,
                    "text": "[8]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 1119,
                    "end": 1122,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 1520,
                    "end": 1524,
                    "text": "[10]",
                    "ref_id": "BIBREF9"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Abbreviations can be separated into two classes: standard abbreviations and ad hoc abbreviations. The former are widely used and accepted, including acronyms such as HIV (Human Immunodeficiency Virus) and SARS (Severe Acute Respiratory Syndromes). The latter are abbreviations that are used in special situations. For example, in intensive care unit notes, sentences such as ''61 y (year) .o(old). M(Male) pt(patient) with a hx(history) of COPD (chronic obstructive pulmonary disease), HTN (Hypertension). . . '' often occur. Physicians use many ad hoc abbreviations under heavy time pressure. In order to understand above text, the corresponding expansions are chosen to replace the abbreviations (called text normalization). In the existing works [8, 11, 12] , the operation of text normalization is divided into the following two steps: firstly, all possible expansions are selected from the dictionary; then, a suitable sense is selected according to the context to replace the abbreviations. If the abbreviation or the suitable expansion is not contained in the dictionary, above method could not work. This seriously hinders the effect of text normalization especially for the data with many ad hoc abbreviation such as EMR (Electronic Medical Record), structural and semi-structural data. If the expansion of the abbreviation could be generated by an automatic method, the effect of text normalization could be improved dramatically.",
            "cite_spans": [
                {
                    "start": 382,
                    "end": 388,
                    "text": "(year)",
                    "ref_id": null
                },
                {
                    "start": 749,
                    "end": 752,
                    "text": "[8,",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 753,
                    "end": 756,
                    "text": "11,",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 757,
                    "end": 760,
                    "text": "12]",
                    "ref_id": "BIBREF11"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Abbreviation is a short form of a word or phrase. It is comprised of certain characters in the original order in word or expression. In the existing works, the LCS (Longest Common String) rule is used as the basic criterion to judge the correct expansion. A direct strategy to generate the expansion is to list all the candidate words or phrases meet the requirements of LCS. This strategy has the following drawbacks 1. The search space is difficult to be determined. The search space consists of all words and phrases. But getting all the phrases is impossible.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "2. LCS is a loose rule for expansion, so not all the words or phrase meet LCS are rational expansion. For example, ''MODS'' is the abbreviation of phrase ''Multiple Organ Dysfunction Syndrome''. But it could be the abbreviation of ''modest'', ''normal goods'' etc. even if they meet LCS rule.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "3. The expansion result will contain many phrases with similar semantics. For example, ''deoxyribose nucleic acid'' and ''deoxyribose nucleic acids'' will be generated for ''DNA''. This will result in the number of expansion in the result is very large. Subsequent operations would be impacted.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In this paper, a new method called LMAAE (Language Modelbased Automatic Abbreviation Expansion) is proposed to get the expansion automatically. In LMAAE, the above three drawbacks are processed separately. The flow diagram of LMAAE is depicted in Fig. 1 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 247,
                    "end": 253,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Introduction"
        },
        {
            "text": "The procedure of LMAAE is divided into three steps: partition, expansion and filter, cluster. In each step, appropriate measures are proposed to alleviate the corresponding drawback. Details as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Partition: In this step, the abbreviation is partitioned into several blocks. Each block is corresponding to a word of the phrase. For an abbreviation with n characters, the number of different partition is 2 n . In this paper, there are two means to reduce the number of partition. At first, the maximum number of words in phrase is limited according to the statistic of the phrase in abbreviation dictionary. And then, the rationality of partition is proposed to filter the partition. Through analysis of the number of rational block, the number of rational partition is restricted to a constant value.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Expansion and filter: For each block, all the words in the dictionary meets LCS rule consist of the expansion set of the block. And then, the expansion of the abbreviation is made up of the Cartesian product of each block. At first, through analysis of the characteristic of the abbreviation in dictionary, more than 99% of the abbreviation meet prefix abbreviation rule: abbreviation consists of the prefixes of the key words of the phrase. So prefix abbreviation rule is adopted to reduce the search space of expansion in this paper. This greatly improves the accuracy of the expansion. Secondly, not all the word sequence meet prefix abbreviation rule is a meaningful phrase, so the language model is used to evaluate and filter each word sequence to further reduce the expansion result.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Cluster: The output of previous step is a set with many expansions. But there are many phrases in the set with the same meaning. The mean-shift clustering algorithm is selected to cluster the results to eliminate redundant expansions.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Through above optimizing process, most of the disturbance terms are filtered from the result. The experiment result shows that the expansion set could include most of the expansion in the dictionary. The contributions of this paper can be summarized as follows.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "1. For the first time, an automatic method is first proposed to generate expansion for the abbreviation not contained in dictionary. Collaborated with dictionary-based method, the LMAAE could improve the effective of text normalization dramatically.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "2. Theoretical analysis of the time complexity of the automatic expansion method is presented, and several optimizing processes are proposed to improve the effective of expansion set and the time complexity of method.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "3. An excessive number of expansions will cause poor ASD (abbreviation sense disambiguation) performance. Therefore, we introduce a new strategy for clustering expansions with similar semantics to improve the results.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "The remainder of this paper is organized as follows. Section 2 introduces the related research work. The definitions related to abbreviations and expansions are provided in Section 3, as well as some preliminaries. In Section 4, an analysis of the time complexity of the LMAAE method is presented and a corresponding optimization method is suggested to improve it. To validate the LMAAE method, several experiments were conducted, as discussed in Section 5. Section 6 provides the conclusions and describes areas requiring further work.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In biomedical big data analysis, the main research achievements involve dictionary construction and ASD. This section provides brief summaries of these areas and introduces some other important fields related to abbreviations.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Related work"
        },
        {
            "text": "At present, there are many public abbreviation dictionaries, such as AllAcronym, 1 Abbreviations, 2 and Stedman [13] . Through continuous improvement for almost 20 years, the number of dictionary entries has reached over one million, and the entries are checked manually one by one. Although these dictionaries are widely used in natural language processing, the shortcomings are obvious. Firstly, the maintenance cost is very high, and secondly, such dictionaries are ineffective for ad hoc abbreviations and some specific abbreviations such as eDNA (which consists of a word ''extracellular'' and an abbreviation ''DNA'' (Deoxyribo Nucleic Acid)). An abbreviation dictionary contains pairs of abbreviations and their expansions in the form <abbreviation, expansion>, for example, <SARS, severe acute respiratory syndrome>. In recent years, numerous methods have been suggested to find expansions automatically. Most methods can be classified into two categories: pattern-matching techniques and machine learningbased methods. For pattern-matching techniques, the LCS is the most important standard for candidate pair judgment. Representative works include those on an acronym-finding program [14] and three-letter acronyms [15] . Because the LCS restriction is so loose that many intrusive expansions are introduced, the search range and abbreviation length are limited to a certain extent. For machine learning-based methods, the decision is made by the machine-learning algorithm. For pair classification, proper features are designed to learn the abbreviations and expansions. Typical works include those on SVM (Support Vector Machine)-based [16] , HMM (Hidden Markov Model)-based [17] , CRF (Conditional Random Field)-based [18] , and latent-state neural CRF-based [19] methods. Henriksson et al. [20] stated that different types of texts contain different features and that different models can extract different features. Based on this idea, they suggested a mixed multi-model and multi-corpus model to judge the final full forms based on candidates. The main purposes of above methods are to select best expansion for the abbreviation, the main differences are in the following three aspects: type of abbreviation, the search rule and search scope. the details of these three aspects for these methods are listed in Table 1 .",
            "cite_spans": [
                {
                    "start": 81,
                    "end": 82,
                    "text": "1",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 112,
                    "end": 116,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 1194,
                    "end": 1198,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 1225,
                    "end": 1229,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 1648,
                    "end": 1652,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 1687,
                    "end": 1691,
                    "text": "[17]",
                    "ref_id": "BIBREF16"
                },
                {
                    "start": 1731,
                    "end": 1735,
                    "text": "[18]",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 1772,
                    "end": 1776,
                    "text": "[19]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 1804,
                    "end": 1808,
                    "text": "[20]",
                    "ref_id": "BIBREF19"
                }
            ],
            "ref_spans": [
                {
                    "start": 2326,
                    "end": 2333,
                    "text": "Table 1",
                    "ref_id": null
                }
            ],
            "section": "Abbreviation dictionary construction"
        },
        {
            "text": "Highly accurate abbreviation dictionaries have been applied widely in biomedical big data. However, there are some drawbacks. Firstly, it is time-consuming and laborious to maintain dictionaries, and secondly, dictionaries are not suitable for ad hoc abbreviations.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abbreviation dictionary construction"
        },
        {
            "text": "For standard abbreviations, the main task of ASD is to choose a suitable expansion from the dictionary according to the context. The machine learning is the most used methods for ASD. In [21] [22] [23] [24] , a classifier for each abbreviation is trained according to the context. In [21] , Moon et al. presented evaluations of three kinds of classifier (na\u00efve Bayes, SVM, decision trees) in terms of their features, context window sizes, orientations, and minimum training sample sizes and proposed the best configuration of these parameters. In [22] , Wu et al. described the use of word embedding to construct the context. Two new SBE (surrounding-based embedding) context modes called LR_SBE (left-right surrounding based embedding) feature and MAX_SBE (maximum surrounding based embedding) feature are integrated as the context. Then, the context is entered into the SVM to select the proper sense. In [23] , the authors discussed the use of two kinds of context mode (SBE and term frequency-inverse document frequencybased embedding modes) to model the context, followed by abbreviation disambiguation by calculating the cosine similarity to choose the most similar one from the given candidates. Hua et al. [24] established a profile for each sense of an abbreviation from the discharge summaries and admission notes. During disambiguation, the cosine similarities between the context vector of the abbreviation and the profile vectors are calculated, and the sense corresponding to the highest similarity score is selected as the correct one.",
            "cite_spans": [
                {
                    "start": 187,
                    "end": 191,
                    "text": "[21]",
                    "ref_id": "BIBREF20"
                },
                {
                    "start": 192,
                    "end": 196,
                    "text": "[22]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 197,
                    "end": 201,
                    "text": "[23]",
                    "ref_id": "BIBREF22"
                },
                {
                    "start": 202,
                    "end": 206,
                    "text": "[24]",
                    "ref_id": "BIBREF23"
                },
                {
                    "start": 284,
                    "end": 288,
                    "text": "[21]",
                    "ref_id": "BIBREF20"
                },
                {
                    "start": 547,
                    "end": 551,
                    "text": "[22]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 907,
                    "end": 911,
                    "text": "[23]",
                    "ref_id": "BIBREF22"
                },
                {
                    "start": 1214,
                    "end": 1218,
                    "text": "[24]",
                    "ref_id": "BIBREF23"
                }
            ],
            "ref_spans": [],
            "section": "ASD"
        },
        {
            "text": "In contrast to the techniques employed in the abovementioned studies, deep learning methods [25, 26] have the obvious advantage that feature engineering can be avoided. In [26] , Ahmed et al. suggested a deep learning model to train a vector for the context of each sense of each abbreviation. For disambiguation, the cosine-similarities for the context vector of the sentence with the context vector of each sense are calculated, and the sense with the maximum value is selected. In [25] , Joopudi et al. proposed a convolutional neural network with one convolutional kernel, a max-pooling layer, and a fully connected feed-forward neural network layer followed by a fully connected softmax classifier. Except for the embedding of surrounding words, the location and part of speech information of the word are considered in the context.",
            "cite_spans": [
                {
                    "start": 92,
                    "end": 96,
                    "text": "[25,",
                    "ref_id": "BIBREF24"
                },
                {
                    "start": 97,
                    "end": 100,
                    "text": "26]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 172,
                    "end": 176,
                    "text": "[26]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 484,
                    "end": 488,
                    "text": "[25]",
                    "ref_id": "BIBREF24"
                }
            ],
            "ref_spans": [],
            "section": "ASD"
        },
        {
            "text": "The processing methods for abbreviations are different in different research fields. The handling details of abbreviations in some typical fields are described below.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Other related application areas"
        },
        {
            "text": "Text Normalization The target of text normalization is to convert the informal text into standard formal form. It is a critical step in the variety of tasks involving speech and language technologies. In [27] , Zhang et al. test the effect of automatic normalization on dependency parsing by using automatically derived parse trees of normalized sentences as reference. It is shown that Table 1 Key detail of the methods.",
            "cite_spans": [
                {
                    "start": 204,
                    "end": 208,
                    "text": "[27]",
                    "ref_id": "BIBREF26"
                }
            ],
            "ref_spans": [
                {
                    "start": 387,
                    "end": 394,
                    "text": "Table 1",
                    "ref_id": null
                }
            ],
            "section": "Other related application areas"
        },
        {
            "text": "Type of abbreviation Search rule Search scope [14] Acronym LCS of initial Any subsequence in ten words before the acronym [15] Acronym LCS of initial, heuristics rules Any subsequence in the sentence [16] Acronym SVM Any sequences in the sentence exceed the number of characters in the acronym in length [17] Acronym LCS and the same initials min(|A| + 5, |A| * 2) [18] Acronym CRF Any subsequence in the sentence [19] Acronym LNCRF All the subsequence in the document [20] Abbreviation Semantic distance of context All the words in the text the performance of the normalizer is directly tied to the performance of a downstream dependency parser. In [28] , Wu Y et al. presented a framework called CARD(clinical abbreviation recognition and disambiguation) to handle the abbreviation in clinical data that leverages previously developed methods, including:",
            "cite_spans": [
                {
                    "start": 46,
                    "end": 50,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 122,
                    "end": 126,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 200,
                    "end": 204,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 304,
                    "end": 308,
                    "text": "[17]",
                    "ref_id": "BIBREF16"
                },
                {
                    "start": 365,
                    "end": 369,
                    "text": "[18]",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 414,
                    "end": 418,
                    "text": "[19]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 469,
                    "end": 473,
                    "text": "[20]",
                    "ref_id": "BIBREF19"
                },
                {
                    "start": 650,
                    "end": 654,
                    "text": "[28]",
                    "ref_id": "BIBREF27"
                }
            ],
            "ref_spans": [],
            "section": "References"
        },
        {
            "text": "(1) machine learning based approaches to recognize abbreviations from a clinical corpus, (2) clustering-based semi-automated methods to generate possible senses of abbreviations, and (3) profile-based word sense disambiguation methods for clinical abbreviations. In [29] , Yonghui Wu et al. propose a hybrid strategy that combines a machine learning based method using SVM, a profile-based method using Vector Space Model, and a majoritysense method to resolve ambiguous abbreviations appeared at different frequency levels. In [30] , Pierre Zweigenbaum et al.",
            "cite_spans": [
                {
                    "start": 266,
                    "end": 270,
                    "text": "[29]",
                    "ref_id": "BIBREF28"
                },
                {
                    "start": 528,
                    "end": 532,
                    "text": "[30]",
                    "ref_id": "BIBREF29"
                }
            ],
            "ref_spans": [],
            "section": "References"
        },
        {
            "text": "propose a supervised abbreviation resolution system. The system learns a MaxEnt(Maximum Entropy) model from the training data, based on a simple feature set that combines UMLS(Unified Medical Language System) knowledge with information gathered from the EMR text. Software maintenance: Information retrieval techniques are being exploited by an increasing number of tools supporting software maintenance activities. Identifiers are among the most valuable sources of information for software maintenance. When a programmer introduces an abbreviation (e.g., rect) as an identifier, the difficulty of understanding the identifier is increased. Corazza et al. [31] proposed a method of automatically splitting identifiers into their composing words and expanding abbreviations. The solution is based on a graph model and performs linearly in time with respect to the dictionary size. Because only complete words are considered in the identifier, multi-word abbreviations cannot be handled effectively, but this approach regarding identifiers is the most commonly used. Alatawi et al. [32] proposed a Bayesian unigram-based inference to expand abbreviations automatically into their original words to enhance source code maintenance. In this technique, a list of candidate words is extracted automatically from the source code for a given abbreviation and the statistical properties of the unigram of the abbreviation are employed as evidence to find the best candidate word. Due to the use of the unigram model, this approach cannot be utilized to address abbreviations that are expandable into phrases. Alatawi et al. [12] presented a bigram-based approach that could be used to expand an abbreviation into a phrase automatically with multiple unigrams. In this method, the abbreviation is firstly divided into segments. Then, the candidates for each segment are generated, where the candidates consist of the sequences of full forms of segment. Finally, the best phrase is chosen from the phrase candidates according to the bigram language model (LM).",
            "cite_spans": [
                {
                    "start": 657,
                    "end": 661,
                    "text": "[31]",
                    "ref_id": "BIBREF30"
                },
                {
                    "start": 1081,
                    "end": 1085,
                    "text": "[32]",
                    "ref_id": "BIBREF31"
                },
                {
                    "start": 1616,
                    "end": 1620,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                }
            ],
            "ref_spans": [],
            "section": "References"
        },
        {
            "text": "Schema matching: Abbreviations, particularly ad hoc abbreviations, are used in schema more frequently because of the limitation of the length of attribute's name. Ratinov and Gudes [33] proposed a method in which a neural network is utilized to judge the relation between two elements (one is an abbreviation, and the other is a full form). Firstly, the relation between the abbreviation and full form is formalized into a sequence containing four operations, and a neural network is then trained to judge the correctness of the operation sequence. In this method, the relation between the abbreviation and full form is judged by the neural network, but the candidate full form must be prepared in advance, which is not the case in all fields. Sorrentino et al. [34] used four resources to evaluate each expansion and selected the expansion with the maximum evaluation value to normalize the abbreviation.",
            "cite_spans": [
                {
                    "start": 181,
                    "end": 185,
                    "text": "[33]",
                    "ref_id": "BIBREF32"
                },
                {
                    "start": 762,
                    "end": 766,
                    "text": "[34]",
                    "ref_id": "BIBREF33"
                }
            ],
            "ref_spans": [],
            "section": "References"
        },
        {
            "text": "In addition to the abovementioned areas, some other fields are influenced by abbreviations, such as data integration [35] , speech recognition [36] and string join [37, 38] etc. In these fields, abbreviation dictionaries play an important role in abbreviation operation.",
            "cite_spans": [
                {
                    "start": 117,
                    "end": 121,
                    "text": "[35]",
                    "ref_id": "BIBREF34"
                },
                {
                    "start": 143,
                    "end": 147,
                    "text": "[36]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 164,
                    "end": 168,
                    "text": "[37,",
                    "ref_id": "BIBREF36"
                },
                {
                    "start": 169,
                    "end": 172,
                    "text": "38]",
                    "ref_id": "BIBREF37"
                }
            ],
            "ref_spans": [],
            "section": "References"
        },
        {
            "text": "In order to describe the problem and the proposed scheme clearly, the symbols used in the paper are shown in Table 2 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 109,
                    "end": 116,
                    "text": "Table 2",
                    "ref_id": "TABREF0"
                }
            ],
            "section": "Problem analysis and definition"
        },
        {
            "text": "Example 1. Naked eDNA, most of it released by cell death, is nearly ubiquitous in the environment.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Problem analysis and definition"
        },
        {
            "text": "In Example 1, the abbreviation Edna cannot be found in many acronym dictionaries. By analyzing the abbreviations, it could be seen that the abbreviation consist of an initial of word ''extracellular'' and a standard abbreviation ''DNA''. Therefore, even for these standard abbreviations, the dictionary could not provide their full forms. Example 2. Fig. 2 shows a part of class structure of NCIt (National Cancer Institute thesaurus). To understand the semantic information of the schema correctly, it is necessary to obtain the semantics of each element in the schema. But in this schema, the designer gives some abbreviations like ''EGFR-GRB2 (Epidermal Growth Factor Receptor-Growth Factor Receptor Bound Protein 2)'' which does not included in the dictionary. In fact, it is composed of two abbreviations ''EGFR'' and ''GRB2''. Similarity of phrase 1 Example 3. Fig. 3 presents a database schema. To understand the semantic information in a schema correctly, it is necessary to obtain the semantics of each element it contains. However, in this schema, the designer has used some ad hoc abbreviations, such as AnonEncID, FloMeasID, FloMeasName and MeasValue, according to his personal preferences. Obviously, the full forms of these abbreviations would not be included in an abbreviation dictionary, because they are only used by the designer rather than widely accepted.",
            "cite_spans": [
                {
                    "start": 854,
                    "end": 855,
                    "text": "1",
                    "ref_id": "BIBREF0"
                }
            ],
            "ref_spans": [
                {
                    "start": 350,
                    "end": 356,
                    "text": "Fig. 2",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 867,
                    "end": 873,
                    "text": "Fig. 3",
                    "ref_id": "FIGREF2"
                }
            ],
            "section": "Problem analysis and definition"
        },
        {
            "text": "The examples provided above demonstrate that abbreviations are always changing. Thus, the dictionary-based method is ineffective, especially for ad hoc abbreviations. After analyzing the characteristics of the abovementioned abbreviations, we found that the problem becomes easy if the correct partition of the abbreviation in question is obtained. For example, if WEBGL is divided into ''WEB'' and ''GL'', the real semantic can be found easily by using a dictionary. Based on this idea, this paper proposes an LM-based automatic abbreviation expansion method to enumerate all possible full forms of abbreviations.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Problem analysis and definition"
        },
        {
            "text": "The concepts related to abbreviation expansion can be described as follows. The automatic abbreviation expansion procedure is shown in Algorithm 1. Algorithm 1 takes S, D, and the LM as inputs. Firstly, the prefix abbreviation is partitioned and the partitions are evaluated and sorted according to certain rules. Then, each partition is restored according to D to obtain all possible candidate expansions. Next, the candidate semantic set is evaluated and filtered according to the LM to obtain the semantic set. Finally, by clustering the semantic set, the clustering semantic set is obtained as the expansion result. The details of this algorithm are provided in Section 4.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Problem analysis and definition"
        },
        {
            "text": "Block Arbitrary continuous characters constitute a block of Partition set: All reasonable partitions of S constitute the partition set of S, denoted as PARTISET (S).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "For any S, the partition set can be obtained by employing Algorithm 2. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "Here, for each i, the value of P(LEN(S), i) is as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": ". . .. . .. . .. . .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "The sum of the formulas above is",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "According to Eq. (7), the number of partitions of S is 2 LEN(S)\u22121 , so the worst-case time complexity of a partition is O(2 LEN(S)\u22121 ). Usually, this time complexity is known as unsolvable. However, in this situation, length restrictions can be imposed on the abbreviation and partition to obtain the upper limit of the number of partitions.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "The upper partition length limit corresponds to the number of words in the full forms. Intuitively, an upper limit N must exist. Fig. 4 presents the statistical results for the full forms (of which there are about 900,000) on a well-known abbreviation website. 3 Fig. 4 demonstrates that when the number of words exceeds 7, there are fewer corresponding phrases, but when the number of words is greater than or equal to 8, about 99.5% of the full forms can be included. In a practical situation, by setting the upper partition length limit to 8, the complexity of the algorithm can be decreased considerably while negligibly affecting the precision.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 129,
                    "end": 135,
                    "text": "Fig. 4",
                    "ref_id": "FIGREF5"
                },
                {
                    "start": 263,
                    "end": 269,
                    "text": "Fig. 4",
                    "ref_id": "FIGREF5"
                }
            ],
            "section": "Element name decomposition"
        },
        {
            "text": "Let the upper limit of words be N. Then, the number of partitions is given by",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "According to Eq. (8), when the length of S exceeds a certain threshold, the complexity is decreased from exponential magnitude to polynomial magnitude.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "Based on the concept of reasonable partition, if and only if each block is a reasonable block, the partition is a reasonable partition. Therefore, in the segmentation process, the recursion can be pruned when an unreasonable block is encountered. Doing so can reduce the complexity, whose quantitative analysis is presented below.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "There must be a correct partition corresponding to the expansion when segmenting any prefix abbreviation. Except for the blocks of the correct partition, those of the other partitions are distributed randomly across the character sequence space. Before presenting the quantitative analysis of the ratio of reasonable blocks in the random character sequence space, it is necessary to introduce the following concepts.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "Trie tree: A complete tree with a degree of 26. The 26 children of each node correspond sequentially to the 26 letters.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "Word node: For each node in a trie tree, if the string from the root to the node corresponds to a word in the dictionary, the word is called a word node.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "Prefix node: All of the nodes in the path from the root to the word node are called prefix nodes.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "Prefix number: For each node, the total number of word nodes in its subtree is denoted as the prefix number of the node.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "Non-prefix node: A node is a non-prefix node when its prefix number is zero.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "When dividing a character sequence, all of the blocks in the partition besides the correct one are randomly distributed in the dictionary tree. Assuming that the length of a random block is 5, the corresponding prefix number is 26 5 = 11, 881, 376. However, the number of the words in the dictionary is just 1,193,517, and the number of reasonable blocks with length 5 must be less than this value 4 . Consequently, only 10% of all prefixes with length 5 are reasonable. The actual statistics for the dictionary are shown in Fig. 5 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 525,
                    "end": 531,
                    "text": "Fig. 5",
                    "ref_id": "FIGREF9"
                }
            ],
            "section": "Element name decomposition"
        },
        {
            "text": "According to Fig. 5 , the ratio of reasonable prefixes is about 14% in a random letter sequence when the prefix length is 4 3 www.abbreviations.com. 4 The dictionary is generated from a 14 Gb corpus text from twitter, the number of the words is 552345. and 1% when the length is 5. Most of the random blocks with lengths of more than 5 are not reasonable. To analyze the number of reasonable partitions, we set the prefix length to 4 (it was assumed that a prefix was unreasonable when its length was more than 4; otherwise, it was considered to be reasonable). The number of reasonable partitions in this case is shown in Fig. 6 .",
            "cite_spans": [
                {
                    "start": 149,
                    "end": 150,
                    "text": "4",
                    "ref_id": "BIBREF3"
                }
            ],
            "ref_spans": [
                {
                    "start": 13,
                    "end": 19,
                    "text": "Fig. 5",
                    "ref_id": "FIGREF9"
                },
                {
                    "start": 623,
                    "end": 629,
                    "text": "Fig. 6",
                    "ref_id": "FIGREF10"
                }
            ],
            "section": "Element name decomposition"
        },
        {
            "text": "In Fig. 6 , the number of reasonable partitions increases slowly with increasing abbreviation length. When the length is 8, the number of reasonable partitions is less than 100. The number of reasonable partitions reaches its maximum of 9,867 when the length is 19, then drops rapidly with further increasing L. For abbreviations with lengths greater than 32, there is only one reasonable partition, the correct one.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 3,
                    "end": 9,
                    "text": "Fig. 6",
                    "ref_id": "FIGREF10"
                }
            ],
            "section": "Element name decomposition"
        },
        {
            "text": "According to the analysis presented above, after pruning in advance based on the reasonability of blocks, the complexity is greatly reduced from the original polynomial magnitude to a constant magnitude, which is acceptable in practical situations.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Element name decomposition"
        },
        {
            "text": "For a given abbreviation, all reasonable partitions can be obtained by applying the algorithm in Section 4.1. When a user omits some characters in a phrase to form an abbreviation, some rules are always followed, so the partitions can be evaluated according to the rules. The next three rules are selected as the evaluation criterion for partitions.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition evaluation"
        },
        {
            "text": "Accordingly, in the LMAAE method, Eq. (9) is utilized to calculate the rationality of each reasonable partition except the initial partition, denoted as Rationality(\u2202). The rationality of initial partition is set to a fixed value. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition evaluation"
        },
        {
            "text": "could be calculated using Eq. (10)",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Rationality(\u2202)"
        },
        {
            "text": "According to Eq. (9), the rationality of each reasonable partition can be calculated. Then, the Max-N strategy is used to filter some partitions. A partition that is not filtered is an effective partition, and all of the effective partitions form an effective partition set.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Rationality(\u2202)"
        },
        {
            "text": "For the effective partitions selected by using the Max-N strategy, it would be simple to enumerate all possible expansions by enumerating all possible expansions for each block and then determining their Cartesian product. However, the result is too large to handle. This section presents an analysis of the complexity of the expansion and suggests an optimized strategy based on statistical LMs. Theoretical analysis of the strategy is provided, demonstrating that this method can limit the result set to an acceptable range. Related definitions are listed below. , denoted as shown in Eq. (11) . In ParES",
            "cite_spans": [
                {
                    "start": 591,
                    "end": 595,
                    "text": "(11)",
                    "ref_id": "BIBREF10"
                }
            ],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": ", each expansion is a sequence of words denoted as WS = (w \u2202 1 ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": "For each reasonable block \u2202 i j , LEN(PreES(\u2202 i j )) is the prefix number of the corresponding node of \u2202 i j in the trie tree. The average number of prefixes with length n can be estimated based on the statistics of the average number of nodes on the n-th floor of the trie tree. The real data are shown in Table 4 . By analyzing the problem and considering the data in Table 4, the length of PreES(\u2202 i j ) could be replaced by the average value",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 307,
                    "end": 314,
                    "text": "Table 4",
                    "ref_id": "TABREF4"
                }
            ],
            "section": "Partition expansion"
        },
        {
            "text": ". If \u2202 j is a partition of an abbreviation of length L and LEN",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": "). This value is too large to handle effectively. To solve this problem, this paper suggests a strategy based on statistical LMs.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": "Based on the example in Table 3 , most of the expansions of S in CandSS(S) are meaningless phrases. A statistical LM [39, 40] has the function of distinguishing meaningless phrases from the candidate expansions. In the LMAAE method, each candidate is evaluated using the LM and the candidates with evaluation values under a threshold are filtered.",
            "cite_spans": [
                {
                    "start": 117,
                    "end": 121,
                    "text": "[39,",
                    "ref_id": "BIBREF38"
                },
                {
                    "start": 122,
                    "end": 125,
                    "text": "40]",
                    "ref_id": "BIBREF40"
                }
            ],
            "ref_spans": [
                {
                    "start": 24,
                    "end": 31,
                    "text": "Table 3",
                    "ref_id": "TABREF2"
                }
            ],
            "section": "Partition expansion"
        },
        {
            "text": "Co-occurrence rate: The ratio of the words that can appear adjacent to word w in all word sets, denoted as \u03c1(w), is given by \u03c1(w) = |set of words next to w| |set of all words| .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": "Because every word has a different co-occurrence rate, the co-occurrence rate of every word is set equal to the average co-occurrence rate in the dictionary for the convenience of analysis. By employing the co-occurrence rate, LEN(ParES",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": ") can be calculated as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": "In Wikipedia data, the average co-occurrence rate is 0.00046.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": "Assuming \u03c1 = 0.0005, LEN(S) = 10, when the number of blocks M is 5, and the number of effective expansions is about 9 according to Eq. (14) . All of the effective expansions of each effective partition constitute the semantic set of S (denoted as SS(S)).",
            "cite_spans": [
                {
                    "start": 135,
                    "end": 139,
                    "text": "(14)",
                    "ref_id": "BIBREF13"
                }
            ],
            "ref_spans": [],
            "section": "Partition expansion"
        },
        {
            "text": "Because a root can yield numerous words with the same prefix and similar semantics, there are many phrases with close similar semantics in the set, which would disturb subsequent operations, such as ASD. A clustering method is introduced below to merge phrases with similar semantics.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Semantic set clustering"
        },
        {
            "text": "For any two phrases (phrase 1 = {w 1 1 , w 2 1 , . . . . . . , w n 1 }, phrase 2 = {w 1 2 , w 2 2 , . . . . . . , w m 2 )}, the semantic similarity is defined as",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Semantic set clustering"
        },
        {
            "text": ").",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Semantic set clustering"
        },
        {
            "text": "In Eq. (15), vector ( w i 1 ) denotes the word embedding of w i 1 , and EM is the Euclidean distance between two vectors. Compared with sentences, there are fewer words and the semantics are simpler in phrases. Therefore, this method can provide better results by taking the average value of the word vectors as the vector representation of a phrase.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Semantic set clustering"
        },
        {
            "text": "The mean-shift clustering algorithm is selected to cluster phrases, as shown in Algorithm 3. In Algorithm 3, the expansion phrases in SS(S) are divided into several categories according to semantic distance. In each class, the phrase with the maximum statistical probability is selected as the semantic representation of that category, which consists of the clustering semantic set (CLUSS(S)) of S. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Semantic set clustering"
        },
        {
            "text": "The LMAAE method can obtain all of the candidate expansions automatically. It can effectively handle ad hoc abbreviations, which the dictionary-based method cannot. For standard abbreviations, it can supplement the dictionary-based method when abbreviations are missing from the dictionary. To validate the effectiveness of the LMAAE method, the following experiments were conducted.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Experiments"
        },
        {
            "text": "1. In order to validate the precision of LMAAE method to standard abbreviation, a simulation experiment is conducted on the abbreviation in the dictionary. The result shows that more than 80% of the expansions in the dictionary are listed by LMAAE.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Experiments"
        },
        {
            "text": "2. In order to validate the precision of LMAAE method to ad hoc abbreviation, a set of ad hoc abbreviation is selected from OAEI 5 (Ontology Alignment Evaluation Initiative). The precision of Top-20 reached 75%. 3. In order to validate the effectiveness of LMAAE to the related fields, two simulation experiments are conduct on schema matching and text normalization. The result shows that LMAAE could increase the precision exceed 5 percent in related fields.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Experiments"
        },
        {
            "text": "In some research fields such as ASD, users must choose the most suitable semantics from all of the candidate semantics, so the completeness of the set of candidate semantics is crucial. To validate the completeness of the LMAAE method, the following experiment was performed.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comparison with the dictionary for standard abbreviations"
        },
        {
            "text": "Test data consisting of 1000 abbreviations and all of their full forms were extracted from an online abbreviation dictionary (www.abbreviations.com). Then, the LMAAE method was used to obtain the expansions of the abbreviations. The precision and recall given by Eqs. (16) and (17), respectively, were used to evaluate the results.",
            "cite_spans": [
                {
                    "start": 268,
                    "end": 272,
                    "text": "(16)",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [],
            "section": "Comparison with the dictionary for standard abbreviations"
        },
        {
            "text": "Precision The proportion of the full forms in the abbreviation dictionary that are listed by the automatic algorithm.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comparison with the dictionary for standard abbreviations"
        },
        {
            "text": "Recall: The proportion of the full forms listed by the automatic algorithm that are in the abbreviation dictionary.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comparison with the dictionary for standard abbreviations"
        },
        {
            "text": "In Eqs. (16) and (17), AUTOFF (Abbr) is the set of all full forms listed by the automatic algorithm, and DICFF (Abbr) is the set of all full forms in the abbreviation dictionary. The experimental results are presented in Fig. 7 . Fig. 7(a) shows the precision of the LMAAE method. The horizontal axis corresponds to the precision of the automatic expansion results, and the vertical axis shows the percentage of abbreviations with a particular precision. The blue and red curves were obtained using the 2-and 3-gram LMs, respectively. For instance, on the 3-gram curve, when the vertical value is 35.3 and the horizontal value is 90, it means that 35.3% of the abbreviations have automatic expansion results with precisions between 90% and 95%. When the 2-gram LM is used, 2.2% of the expansion results include all of the full forms in the dictionary, and 89.4% of the expansion results have precisions greater than 80%. When the 3-gram LM is used, 3.5% of the expansion results include all of the full forms in the dictionary, and 96.6% of the expansion results have precisions greater than 85%. The data in Fig. 6 (a) demonstrate that most of the full forms in the dictionary could be obtained by the automatic algorithm. Fig. 7 (b) depicts the recall of the LMAAE method. The horizontal axis corresponds to the recall of the automatic expansion results, and the vertical axis shows the percentage of the abbreviations with a particular recall. The meanings of the curves are similar to those of the precision curves. When the 2-gram LM is used, only 4.1% of the expansion results have recalls greater than 60%, and most of the results have recalls around 30%. When the 3-gram LM is used, only 8.9% of the expansion results have recalls greater than 60%, and most of the results have recalls around 35%. The data in Fig. 7(b) indicate that most of the expansions generated by the algorithm are not listed in the abbreviation dictionary.",
            "cite_spans": [
                {
                    "start": 8,
                    "end": 12,
                    "text": "(16)",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [
                {
                    "start": 221,
                    "end": 227,
                    "text": "Fig. 7",
                    "ref_id": "FIGREF6"
                },
                {
                    "start": 230,
                    "end": 239,
                    "text": "Fig. 7(a)",
                    "ref_id": "FIGREF6"
                },
                {
                    "start": 1109,
                    "end": 1115,
                    "text": "Fig. 6",
                    "ref_id": "FIGREF10"
                },
                {
                    "start": 1224,
                    "end": 1230,
                    "text": "Fig. 7",
                    "ref_id": "FIGREF6"
                },
                {
                    "start": 1818,
                    "end": 1827,
                    "text": "Fig. 7(b)",
                    "ref_id": "FIGREF6"
                }
            ],
            "section": "Comparison with the dictionary for standard abbreviations"
        },
        {
            "text": "According to the data in Fig. 7 (a) and 7(b), the automatic expansion results include most of the full forms in the dictionary but about 65% of the expansion result are not listed in the dictionary( called Non-dictionary expansion). Non-dictionary expansion is not the error, but the correct expansion abbreviated seldom. Because not any dictionary could contain all the abbreviation and its expansion, so even the standard abbreviation, dictionary-based method could not handle all of them. When the corresponding expansion is not contained in the dictionary, the automatic expansion set would give an effective supplement to increase the precision of ASD.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 25,
                    "end": 31,
                    "text": "Fig. 7",
                    "ref_id": "FIGREF6"
                }
            ],
            "section": "Comparison with the dictionary for standard abbreviations"
        },
        {
            "text": "Ad hoc abbreviations appear in schemas, knowledge graphs etc., and generally are not included in abbreviation dictionaries. To validate the effectiveness of the LMAAE method at expanding ad hoc abbreviations, 531 ad hoc abbreviations were extracted from the data set used in the OAEI contest, and the correct full forms were generated manually (only 73 full forms could be found in the abbreviation dictionary). The experimental results are summarized in Table 5 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 455,
                    "end": 462,
                    "text": "Table 5",
                    "ref_id": "TABREF6"
                }
            ],
            "section": "Expansion of ad hoc abbreviations"
        },
        {
            "text": "Through the data in Table 5 , LMAAE shows good performance for ad hoc abbreviations. For 3-gram model, its TOP1 precision is 42.5%(for 42.5% of the abbreviation generate expansion by LMAAE, the first expansion is correct) and TOP3(the correct expansion is in the first three expansion) precision reaches 60.3%. When the number of candidate is expands to 20, it achieves 76.9% precision. For 2-gram model, the result is slightly low than 3gram model. The data shows that LMAAE could expand ad hoc abbreviation effectively.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 20,
                    "end": 27,
                    "text": "Table 5",
                    "ref_id": "TABREF6"
                }
            ],
            "section": "Expansion of ad hoc abbreviations"
        },
        {
            "text": "The objective of schema matching is to find the correspondences between the elements of the schema. Abbreviations in the names of the elements in a schema is a significant obstacle in schema matching. In this section, we describe the use of the LMAAE method to handle the abbreviations in the schemas to verify its effectiveness in this application. Three schema matching tasks were conducted, as shown in Table 6 , and three classical schema-matching algorithms (Cupid [41] , COMA++ [42] , and SF (similarity flooding) [43] ) were selected.",
            "cite_spans": [
                {
                    "start": 470,
                    "end": 474,
                    "text": "[41]",
                    "ref_id": "BIBREF41"
                },
                {
                    "start": 484,
                    "end": 488,
                    "text": "[42]",
                    "ref_id": "BIBREF42"
                },
                {
                    "start": 520,
                    "end": 524,
                    "text": "[43]",
                    "ref_id": "BIBREF43"
                }
            ],
            "ref_spans": [
                {
                    "start": 406,
                    "end": 413,
                    "text": "Table 6",
                    "ref_id": "TABREF7"
                }
            ],
            "section": "Schema matching improvement"
        },
        {
            "text": "In this experiment, the three algorithms were firstly used to obtain the matching results directly (the abbreviations were handled by a standard abbreviation dictionary such as Word-Net). Then, the LMAAE method was used to preprocess the abbreviations in the schemas. For each abbreviation, the LMAAE method generated its top 10 full forms. When calculating the name similarity between elements, the maximum name similarity was selected as the final value. Standard measurements including precision (defined as the ratio between the number of correctly detected result and the total number of abbreviations), recall(defined as the ratio between the number of results correctly detected by the system and the total number of abbreviations), and F1 score (calculated as 2*precision*recall/(precision+ recall)) were used to evaluate the matching results. The experimental results are presented in Fig. 8 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 894,
                    "end": 900,
                    "text": "Fig. 8",
                    "ref_id": null
                }
            ],
            "section": "Schema matching improvement"
        },
        {
            "text": "The data in Fig. 8 demonstrate that the LMAAE method can improve the performance effectively. The LMAAE method provides a precision 7% greater than that of the classical algorithm on average. The improvement is different for each matching task: 5% for SM1, 9% for SM2, and 7% for SM3 and the maximum improvement is 84%-95% for SM2 with Cupid. For recall, the LMAAE method exhibits 6% improvement over the classical algorithm on average. The improvement is 4% for SM1, 7% for SM2, and 6% for SM3, and the maximum improvement is 74.7%-82.2% for SM2 with SF. The F1-Score is increased by 6% on average with the LMAAE method compared to the classical algorithm. The improvement 4.5% for SM1, 8% for SM2, and 6.5% for SM3, and the maximum improvement is 81%-90% for SM2 with COMA++. Thus, the precision and overall score are obviously improved by using the LMAAE method before the classical schema matching algorithm. The improvements are especially notable for SM2, which included more abbreviations. The LMAAE method could enhance the schema matching effectively. To highlight the effects for the elements with abbreviations, Table 7 provides a statistical overview of the abbreviation matching results. In Table 7 , the numbers in the cells represent the number of abbreviation matches in each task for different matching methods. For example, the data in the second row means that: there are 5 matching relations in ground-truth with attribute in element's name, Cupid and COMA++ generate 3 of them, SF generate 2 of them. But with the assist of LMAAE, Cupid and COMA++ generate all of them, SF generate 4 of them. Table 7 Statistics of the abbreviation matching results. Task  Ground-truth  Cupid  COMA++  SF  LMAAE-Cupid  LMAAE-COMA++  LMAAE+SF   SM1  5  3  3  2  5  5  4  SM2  40  17  18  17  34  36  32  SM3  85  26  28  23  62 65 60 Fig. 9 . Precision, recall and F1-score of Text Normalization.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 12,
                    "end": 18,
                    "text": "Fig. 8",
                    "ref_id": null
                },
                {
                    "start": 1123,
                    "end": 1130,
                    "text": "Table 7",
                    "ref_id": null
                },
                {
                    "start": 1204,
                    "end": 1211,
                    "text": "Table 7",
                    "ref_id": null
                },
                {
                    "start": 1614,
                    "end": 1621,
                    "text": "Table 7",
                    "ref_id": null
                },
                {
                    "start": 1671,
                    "end": 1830,
                    "text": "Task  Ground-truth  Cupid  COMA++  SF  LMAAE-Cupid  LMAAE-COMA++  LMAAE+SF   SM1  5  3  3  2  5  5  4  SM2  40  17  18  17  34  36  32  SM3  85  26  28  23  62",
                    "ref_id": "TABREF0"
                },
                {
                    "start": 1837,
                    "end": 1843,
                    "text": "Fig. 9",
                    "ref_id": null
                }
            ],
            "section": "Schema matching improvement"
        },
        {
            "text": "As demonstrated by Table 7 , with the help of the LMAAE method, the classical algorithms could identify more correct matches for the abbreviations. For SM2, only 17 abbreviation matches were identified with WordNet, but with the LMAAE method, 34 relations were identified. For SM3, the precision was improved considerably. Thus, the LMAAE method could solve the abbreviation problem effectively.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 19,
                    "end": 26,
                    "text": "Table 7",
                    "ref_id": null
                }
            ],
            "section": "Schema matching improvement"
        },
        {
            "text": "For further verification of the effective of LMAAE, a hot research area text normalization is select in this section. One of the main targets of text normalization is to get the correct expansion of the abbreviation in the text. For this experiment, we leveraged the ShARe (Shared Annotated Resources) corpus, a subset of de-identified discharge summary, electrocardiogram, echocardiogram, and radiology reports from about 30,000 ICU (Intensive Care Unit) patients provided by the MIMIC (Multiparameter Intelligent Monitoring in Intensive Care) [44] . In this experiment, a data set with 80 clinical texts and 3024 abbreviations is selected from the corpus and three recent works (CARD [28] , UTHealthCCB [29] , LIMSI [30] ) are used to normalize the text. The same measurements as Section 5.3 are used to evaluate the result. The experimental results are presented in Fig. 9 .",
            "cite_spans": [
                {
                    "start": 545,
                    "end": 549,
                    "text": "[44]",
                    "ref_id": "BIBREF44"
                },
                {
                    "start": 686,
                    "end": 690,
                    "text": "[28]",
                    "ref_id": "BIBREF27"
                },
                {
                    "start": 705,
                    "end": 709,
                    "text": "[29]",
                    "ref_id": "BIBREF28"
                },
                {
                    "start": 718,
                    "end": 722,
                    "text": "[30]",
                    "ref_id": "BIBREF29"
                }
            ],
            "ref_spans": [
                {
                    "start": 869,
                    "end": 875,
                    "text": "Fig. 9",
                    "ref_id": null
                }
            ],
            "section": "Text normalization improvement"
        },
        {
            "text": "The data in Fig. 9 show the result about three original methods and the original method assisted by the LMAAE to handle the abbreviation not included in dictionary(called non-dictionary abbreviation). The method LMAAE-TOP1 means that the LMAAE generate only one expansion for non-dictionary abbreviation. For the other two methods, LMAAE generate 5 or 10 expansions respectively. The result demonstrates that the LMAAE method can improve the overall performance of text normalization. But the improvement is different for each evaluation indicator. For precision, because all three kinds of original methods do not generate expansion for non-dictionary abbreviation, so the precision is decreased when LMAAE generate expansion for nondictionary abbreviation. The maximal decline is generated by CARD method, the precision is decrease from 80% of original to 73% of LMAAE-TOP1. But for recall, LMAAE could increase the performance greatly because the number of standard result is fixed. The maximal rise is generated by UTHealthCCB method , the recall is increased from 61% of original to 72% of LMAAE-TOP10. For the comprehensive indicator F1-score, LMAAE could increase the value for each method especially for UTHealthCCB method from 67% of original to 72% of LMAAE-TOP10. In summary, LMAAE could improve performance of the method for text normalization.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 12,
                    "end": 18,
                    "text": "Fig. 9",
                    "ref_id": null
                }
            ],
            "section": "Text normalization improvement"
        },
        {
            "text": "This paper proposed an LM-based automatic prefix abbreviation reduction method called the LMAAE method. With the widespread use of abbreviations, the dictionary-based method that is currently used to address the abbreviation problem has considerable limitations, especially for ad hoc abbreviations. By analyzing the common rules for abbreviating, it was determined that, compared with reductions, abbreviations conceal word division information (words are linked together) and the complete forms of words (only the prefix is extracted). Therefore, automatic abbreviation reduction can be used to restore latent information. In the proposed automatic reduction technique, the division information is firstly restored by dividing the abbreviations. Secondly, the complete forms are obtained by restoring each block. Finally, according to the LM, the reductions are filtered and clustered to obtain the final results. The time complexity of this algorithm is higher than the dictionary-based method. By analyzing the time complexity, combined with practical problems, an optimized partition algorithm was developed, with the time complexity decreased from exponential to constant. Simultaneously, the time complexity of the reduction algorithm was decreased considerably. The experimental results additionally demonstrated that the proposed method has higher comprehensiveness for general abbreviations. In other words, the reductions can cover most dictionary results. The proposed method also has higher accuracy for ad hoc abbreviations. So it is a good choice to complement for the dictionary-based method.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusions and future work"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "A systematic review of techniques and sources of big data in the healthcare sector",
            "authors": [
                {
                    "first": "S",
                    "middle": [
                        "G"
                    ],
                    "last": "Alonso",
                    "suffix": ""
                },
                {
                    "first": "I",
                    "middle": [],
                    "last": "De La Torre D\u00edez",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "J P C"
                    ],
                    "last": "Rodrigues",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Hamrioui",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "L\u00f3pez-Coronado",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "P"
                    ],
                    "last": "Papa",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "X"
                    ],
                    "last": "Falcao",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [
                        "H C"
                    ],
                    "last": "De Albuquerque",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "M R S"
                    ],
                    "last": "Tavares",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "J. Med. Syst",
            "volume": "41",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Efficient supervised optimum-path forest classification for large datasets",
            "authors": [
                {
                    "first": "J",
                    "middle": [
                        "P"
                    ],
                    "last": "Papa",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "X"
                    ],
                    "last": "Falcao",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [
                        "H C"
                    ],
                    "last": "De Albuquerque",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "M R S"
                    ],
                    "last": "Tavares",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "Pattern Recognit",
            "volume": "45",
            "issn": "",
            "pages": "512--520",
            "other_ids": {}
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "Al-bashir, Objective detection of chronic stress using physiological parameters",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "M"
                    ],
                    "last": "Al Abdi",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "E"
                    ],
                    "last": "Alhitary",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [
                        "W A"
                    ],
                    "last": "Hay",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "K"
                    ],
                    "last": "",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Med. Biol. Eng. Comput",
            "volume": "",
            "issn": "",
            "pages": "1--14",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "Research status and trend analysis of global biomedical text mining studies in recent 10 years",
            "authors": [
                {
                    "first": "X",
                    "middle": [],
                    "last": "Zhai",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Gao",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Scientometrics",
            "volume": "105",
            "issn": "",
            "pages": "509--523",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "Natural language processing systems for capturing and standardizing unstructured clinical information: A systematic review",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Kreimeyer",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Foster",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Pandey",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Arya",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Halford",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "F"
                    ],
                    "last": "Jones",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Forshee",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Walderhaug",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Botsis",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "J. Biomed. Inform",
            "volume": "73",
            "issn": "",
            "pages": "14--29",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Evaluating mapping repair systems with large biomedical ontologies",
            "authors": [
                {
                    "first": "E",
                    "middle": [],
                    "last": "Jim\u00e9nez-Ruiz",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Meilicke",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [
                        "C"
                    ],
                    "last": "Grau",
                    "suffix": ""
                },
                {
                    "first": "I",
                    "middle": [],
                    "last": "Horrocks",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "Descr. Logics",
            "volume": "",
            "issn": "",
            "pages": "246--257",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "ICE-TEA: in-context expansion and translation of English abbreviations",
            "authors": [
                {
                    "first": "W",
                    "middle": [],
                    "last": "Ammar",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Darwish",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "El"
                    ],
                    "last": "Kahki",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Hafez",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "CICLing'11 Proc. 12th Int. Conf. Comput. Linguist. Intell. Text Process. -vol. Part II",
            "volume": "",
            "issn": "",
            "pages": "41--54",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "Unsupervised abbreviation expansion in clinical narratives",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Oleynik",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Kreuzthaler",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Schulz",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "539--543",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Overview of shorthand medical glossary (OMG) study",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Politis",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Lau",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Yeoh",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Brand",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Russell",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Liew",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Intern. Med. J",
            "volume": "45",
            "issn": "",
            "pages": "423--427",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "Matching disease and phenotype ontologies in the ontology alignment evaluation initiative",
            "authors": [
                {
                    "first": "I",
                    "middle": [],
                    "last": "Harrow",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Jim\u00e9nez-Ruiz",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Splendiani",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Romacker",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Woollard",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Markel",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Alam-Faruque",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Koch",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Malone",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Waaler",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "J. Biomed. Semant",
            "volume": "8",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "Semantically-enabled context-aware abbreviations expansion in the clinical domain",
            "authors": [
                {
                    "first": "E",
                    "middle": [],
                    "last": "Chondrogiannis",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Andronikou",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Varvarigou",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Karanastasis",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Proc. 9th Int. Conf. Bioinforma. Biomed. Technol",
            "volume": "",
            "issn": "",
            "pages": "89--96",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "The expansion of source code abbreviations using a language model",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Alatawi",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Yan",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "IEEE 42nd Annu. Comput. Softw. Appl. Conf",
            "volume": "",
            "issn": "",
            "pages": "370--375",
            "other_ids": {}
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "Stedman's medical abbreviations",
            "authors": [
                {
                    "first": "T",
                    "middle": [
                        "L"
                    ],
                    "last": "Stedman",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "Acron. Symb",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "Recognizing acronyms and their definitions",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Taghva",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Gilbreth",
                    "suffix": ""
                }
            ],
            "year": 1999,
            "venue": "Int. J. Doc. Anal. Recognit",
            "volume": "1",
            "issn": "",
            "pages": "191--198",
            "other_ids": {}
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "Automatic extraction of acronyms from text",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Yeates",
                    "suffix": ""
                }
            ],
            "year": 1999,
            "venue": "New Zeal. Comput. Sci. Res. Students' Conf",
            "volume": "",
            "issn": "",
            "pages": "117--124",
            "other_ids": {}
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "Using SVM to extract acronyms from text, Soft Comput",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                }
            ],
            "year": 2006,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "369--373",
            "other_ids": {}
        },
        "BIBREF16": {
            "ref_id": "b16",
            "title": "Cross-language mining for acronyms and their completions from the web",
            "authors": [
                {
                    "first": "U",
                    "middle": [],
                    "last": "Hahn",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Daumke",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Schulz",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [
                        "G"
                    ],
                    "last": "Mark\u00f3",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "Discov. Sci",
            "volume": "",
            "issn": "",
            "pages": "113--123",
            "other_ids": {}
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "Learning conditional random fields with latent sparse features for acronym expansion finding",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "Proc. 20th ACM Int. Conf. Inf. Knowl. Manag",
            "volume": "",
            "issn": "",
            "pages": "867--872",
            "other_ids": {}
        },
        "BIBREF18": {
            "ref_id": "b18",
            "title": "Multi-granularity sequence labeling model for acronym expansion identification",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Inf. Sci. (Ny)",
            "volume": "378",
            "issn": "",
            "pages": "462--474",
            "other_ids": {}
        },
        "BIBREF19": {
            "ref_id": "b19",
            "title": "Synonym extraction and abbreviation expansion with ensembles of semantic spaces",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Henriksson",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Moen",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Skeppstedt",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Daudaravi\u010dius",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Duneld",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "J. Biomed. Semant",
            "volume": "5",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF20": {
            "ref_id": "b20",
            "title": "Automated disambiguation of acronyms and abbreviations in clinical texts: window and training size considerations",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Moon",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "V S"
                    ],
                    "last": "Pakhomov",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [
                        "B"
                    ],
                    "last": "Melton",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "AMIA Annu. Symp. Proc",
            "volume": "2012",
            "issn": "",
            "pages": "1310--1319",
            "other_ids": {}
        },
        "BIBREF21": {
            "ref_id": "b21",
            "title": "Clinical abbreviation disambiguation using neural word embeddings",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Proc. BioNLP",
            "volume": "15",
            "issn": "",
            "pages": "171--176",
            "other_ids": {}
        },
        "BIBREF22": {
            "ref_id": "b22",
            "title": "Acronym disambiguation using word embedding",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Ji",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Yan",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "AAAI'15 Proc. Twenty-Ninth AAAI Conf. Artif. Intell",
            "volume": "",
            "issn": "",
            "pages": "4178--4179",
            "other_ids": {}
        },
        "BIBREF23": {
            "ref_id": "b23",
            "title": "Combining corpus-derived sense profiles with estimated frequency information to disambiguate clinical abbreviations",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "D"
                    ],
                    "last": "Stetson",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Friedman",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "AMIA Annu. Symp. Proc",
            "volume": "2012",
            "issn": "",
            "pages": "1004--1013",
            "other_ids": {}
        },
        "BIBREF24": {
            "ref_id": "b24",
            "title": "A convolutional route to abbreviation disambiguation in clinical text",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Joopudi",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Dandala",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Devarakonda",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "J. Biomed. Inform",
            "volume": "86",
            "issn": "",
            "pages": "71--78",
            "other_ids": {}
        },
        "BIBREF25": {
            "ref_id": "b25",
            "title": "A language modeling approach for acronym expansion disambiguation",
            "authors": [
                {
                    "first": "A",
                    "middle": [
                        "G"
                    ],
                    "last": "Ahmed",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "F A"
                    ],
                    "last": "Hady",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Nabil",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Badr",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Int. Conf. Intell. Text Process",
            "volume": "",
            "issn": "",
            "pages": "264--278",
            "other_ids": {}
        },
        "BIBREF26": {
            "ref_id": "b26",
            "title": "Adaptive Parser-Centric Text Normalization",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Baldwin",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Ho",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Kimelfeld",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "1159--1168",
            "other_ids": {}
        },
        "BIBREF27": {
            "ref_id": "b27",
            "title": "A long journey to short abbreviations: developing an open-source framework for clinical abbreviation recognition and disambiguation (CARD)",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "C"
                    ],
                    "last": "Denny",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "T"
                    ],
                    "last": "Rosenbloom",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [
                        "A"
                    ],
                    "last": "Miller",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "A"
                    ],
                    "last": "Giuse",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Blanquicett",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Soysal",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "J. Am. Med. Inform. Assoc",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF28": {
            "ref_id": "b28",
            "title": "Clinical acronym/abbreviation normalization using a hybrid approach",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Tang",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Jiang",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Moon",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "C"
                    ],
                    "last": "Denny",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "Unkn. J",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF29": {
            "ref_id": "b29",
            "title": "A Supervised Abbreviation Resolution System for Medical Text",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Zweigenbaum",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Del\u00e9ger",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Lavergne",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "N\u00e9v\u00e9ol",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Bodnari",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "CLEF (Working Notes)",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF30": {
            "ref_id": "b30",
            "title": "LINSEN: An efficient approach to split identifiers and expand abbreviations",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Corazza",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "Di"
                    ],
                    "last": "Martino",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Maggio",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "28th IEEE Int. Conf. Softw. Maint",
            "volume": "",
            "issn": "",
            "pages": "233--242",
            "other_ids": {}
        },
        "BIBREF31": {
            "ref_id": "b31",
            "title": "Bayesian unigram-based inference for expanding abbreviations in source code",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Alatawi",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "IEEE 29th Int. Conf. Tools with Artif",
            "volume": "",
            "issn": "",
            "pages": "543--550",
            "other_ids": {}
        },
        "BIBREF32": {
            "ref_id": "b32",
            "title": "Abbreviation expansion in schema matching and web integration",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Ratinov",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Gudes",
                    "suffix": ""
                }
            ],
            "year": 2004,
            "venue": "Proc. 2004 IEEE/WIC/ACM Int. Conf. Web Intell",
            "volume": "",
            "issn": "",
            "pages": "485--489",
            "other_ids": {}
        },
        "BIBREF33": {
            "ref_id": "b33",
            "title": "Schema label normalization for improving schema matching",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Sorrentino",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Bergamaschi",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Gawinecki",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Po",
                    "suffix": ""
                }
            ],
            "year": 2010,
            "venue": "Data Knowl. Eng",
            "volume": "69",
            "issn": "",
            "pages": "1254--1273",
            "other_ids": {}
        },
        "BIBREF34": {
            "ref_id": "b34",
            "title": "A method for interoperable digital libraries and data repositories",
            "authors": [
                {
                    "first": "J",
                    "middle": [
                        "J"
                    ],
                    "last": "Helly",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [
                        "T"
                    ],
                    "last": "Elvins",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Sutton",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Martinez",
                    "suffix": ""
                }
            ],
            "year": 1999,
            "venue": "Futur. Gener. Comput. Syst",
            "volume": "16",
            "issn": "",
            "pages": "21--28",
            "other_ids": {}
        },
        "BIBREF35": {
            "ref_id": "b35",
            "title": "Adaptation of morph-based speech recognition for foreign names and acronyms",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Mansikkaniemi",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Kurimo",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "IEEE Trans. Audio Speech Lang. Process",
            "volume": "23",
            "issn": "",
            "pages": "941--950",
            "other_ids": {}
        },
        "BIBREF36": {
            "ref_id": "b36",
            "title": "Approximate string joins with abbreviations, Very Larg. Data Bases",
            "authors": [
                {
                    "first": "W",
                    "middle": [],
                    "last": "Tao",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Deng",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Stonebraker",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "11",
            "issn": "",
            "pages": "53--65",
            "other_ids": {}
        },
        "BIBREF37": {
            "ref_id": "b37",
            "title": "Acronyms as an integral part of multi-word term recognition -A token of appreciation",
            "authors": [
                {
                    "first": "I",
                    "middle": [],
                    "last": "Spasic",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "IEEE Access",
            "volume": "6",
            "issn": "",
            "pages": "8351--8363",
            "other_ids": {}
        },
        "BIBREF38": {
            "ref_id": "b38",
            "title": "Learning distributed word representations for bidirectional LSTM recurrent neural network",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Qian",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [
                        "K"
                    ],
                    "last": "Soong",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "He",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Zhao",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF40": {
            "ref_id": "b40",
            "title": "A hybrid language model based on a recurrent neural network and probabilistic topic modeling",
            "authors": [
                {
                    "first": "M",
                    "middle": [
                        "S"
                    ],
                    "last": "Kudinov",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "A"
                    ],
                    "last": "Romanenko",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "Pattern Recognit. Image Anal",
            "volume": "26",
            "issn": "",
            "pages": "587--592",
            "other_ids": {}
        },
        "BIBREF41": {
            "ref_id": "b41",
            "title": "Generic schema matching with cupid, Very Larg. Data Bases",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Madhavan",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "A"
                    ],
                    "last": "Bernstein",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Rahm",
                    "suffix": ""
                }
            ],
            "year": 2001,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "49--58",
            "other_ids": {}
        },
        "BIBREF42": {
            "ref_id": "b42",
            "title": "Schema and ontology matching with COMA++",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Aumueller",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [
                        "H"
                    ],
                    "last": "Do",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Massmann",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Rahm",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "906--908",
            "other_ids": {}
        },
        "BIBREF43": {
            "ref_id": "b43",
            "title": "Similarity flooding: a versatile graph matching algorithm and its application to schema matching",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Melnik",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Garcia-Molina",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Rahm",
                    "suffix": ""
                }
            ],
            "year": 2002,
            "venue": "Proc. 18th Int. Conf. Data Eng",
            "volume": "",
            "issn": "",
            "pages": "117--128",
            "other_ids": {}
        },
        "BIBREF44": {
            "ref_id": "b44",
            "title": "MIMIC II: a massive temporal ICU patient database to support research in intelligent patient monitoring",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Saeed",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Lieu",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Raber",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [
                        "G"
                    ],
                    "last": "Mark",
                    "suffix": ""
                }
            ],
            "year": 2002,
            "venue": "Comput. Cardiol",
            "volume": "",
            "issn": "",
            "pages": "641--644",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "Flow diagram of LMAAE.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": "A XML schema.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "Number of elements in PARTISET (S)E-PARTISET (S) Effective partition set of abbreviation S Database schema.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "Character set: \u03a6 = {26 English letters| a, b, c. . . , z}. Definition 2. Ordered string: The arbitrary and repeatable characters in the character set constitute ordered string S, which is denoted as S = {\u03b1 1 , \u03b1 2 , \u03b1 3 , . . . . . . \u03b1 n } (n is the length of the ordered string, denoted as LEN(S)).",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "Word: If S is given a specific meaning, S is defined as word w.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF5": {
            "text": "Dictionary: The set of all words, denoted as D. Definition 5. Phrase: An ordered sequence comprised of several words is defined as a phrase and denoted as Ph = (w 1 w 2...... w n\u22121 w n ) (n is the length of the phrase, denoted as LEN(Ph)). Definition 6. Prefix abbreviation: For any phrase, the prefix abbreviation consists of the first few characters of each word in sequence and is denoted as S = PrefixAbbr(Ph).",
            "latex": null,
            "type": "figure"
        },
        "FIGREF6": {
            "text": "Abbreviation expansion: For any abbreviation S, list all phrases satisfying the prefix abbreviation rule for the specified D and LM. Algorithm 1: LMAAE-METHOD Require: S: the abbreviation, D: dictionary contained all words, LM: a language model. Output: CLUSS(S): all the expansion of S; 1: function LMAAE-METHOD (S, \u2202 i ) \u2190 all the items with prefix \u2202 i S) \u2190 cluster all the items in SS(S)",
            "latex": null,
            "type": "figure"
        },
        "FIGREF7": {
            "text": "abbreviation, start: start position of partition, end: end position of partition, n: total number of blocks, m: number of blocks partitioned, partitions: the m blocks partitioned Output: PARTISET(S): all the partitions of S with n blocks; 1: function Segmentation (S, start, end, n, of S with length N can be listed by using Algorithm 2. Therefore, by modifying the value of N, PARTISET (S) can be listed. The following is the analysis of the number of partitions in PARTISET (S). P(LEN(S), i): The number of partitions with length i of S with length LEN(S). |PARTISET (S)| : The number of the partitions of S. The relationship between the two abovementioned numbers is |partition(S)| = LEN(S) \u2211 i=1 P(LEN(S), i).",
            "latex": null,
            "type": "figure"
        },
        "FIGREF8": {
            "text": "Statistical results for the full forms.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF9": {
            "text": "Ratios of reasonable prefixes with different lengths.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF10": {
            "text": "Number of reasonable partitions in the string with length L.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF11": {
            "text": "Prefix expansion set PreES(\u2202 i ): For any prefix\u2202 i , all of the words in D with prefix \u2202 i make up the expansion set of \u2202 i , denoted as PreES(\u2202 i ) = { w \u2202 i 1 , w \u2202 i 2 , . . . . . . , w \u2202 i n } . In PreES(\u2202 i ),w \u2202 i j is the word with prefix \u2202 i , and n is its length, denoted asLEN(PreES(\u2202 i )). In a trie tree, LEN(PreES(\u2202 i )) is the prefix number of \u2202 i . Partition expansion set ParES ( \u2202 j ) : For any partition \u2202 j , the Cartesian product of all of the PreES(\u2202 i j ) forms the partition expansion set ParES ( \u2202 j )",
            "latex": null,
            "type": "figure"
        },
        "FIGREF12": {
            "text": "Candidate semantic set CandSS(S): For prefix abbreviation S, the intersection of all of the ParES (\u2202 i ) makes up the candidate semantic set of S, denoted asCandSS (S) = \u22c3 LEN(PARTISET (S)) i=1 Pares(\u2202 i ). For the partition \u2202 j = meas, value of ''measvalue'', the possible expansions of all of the blocks are shown in",
            "latex": null,
            "type": "figure"
        },
        "FIGREF14": {
            "text": "Precision and recall of LMAAE method.",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "Symbols definition. Ratio of the words that can appear adjacent to word w in all word sets. PARTISET (S) Partition set of abbreviation S Sim (phrase 1 , phrase 2 )",
            "latex": null,
            "type": "table"
        },
        "TABREF1": {
            "text": "a block of S called block\u2202 i . Coverage: Partition S into m blocks {\u2202 1 , \u2202 2 , . . . . . . , \u2202 m } and each character is contained in at least one block. The set of these blocks is called a coverage of S. For a block \u2202 i of partition , if there exist words with prefixes \u2202 i in D, then \u2202 i is designated as a reasonable block; otherwise, it is designated as an unreasonable block. Reasonable partition: For a partition \u2202 = {\u2202 1 , \u2202 2 , . . . . . . , \u2202 m }",
            "latex": null,
            "type": "table"
        },
        "TABREF2": {
            "text": "Expansion table.",
            "latex": null,
            "type": "table"
        },
        "TABREF3": {
            "text": "The Cartesian product is determined for the set in each column",
            "latex": null,
            "type": "table"
        },
        "TABREF4": {
            "text": "Statistical analysis of average number of prefixes.",
            "latex": null,
            "type": "table"
        },
        "TABREF5": {
            "text": "5 http://oaei.ontologymatching.org/.",
            "latex": null,
            "type": "table"
        },
        "TABREF6": {
            "text": "Accuracy of expansions for ad hoc abbreviations.",
            "latex": null,
            "type": "table"
        },
        "TABREF7": {
            "text": "Overview of the schemas.Fig. 8. Precision, recall and F1-score of six matching method for different task.",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": [
        {
            "text": "Ashiq Anjum is currently a professor of Distributed Systems at the University of Derby, UK. His research interests include data intensive distributed systems, block chain, Internet of Things and high performance analytics platforms. Currently he is investigating high performance distributed platforms to efficiently process video and genomics data. Dr. Anjum has more than 70 international academic publications. He has been part of the EC funded projects in distributed systems and large scale analytics such as Health-e-Child (IP, FP6), neuGrid (STREP, FP7) and TRANSFORM (IP, FP7). He has been a general chair, programmer chair, organizing chair, track chair, publicity chair and workshop chair for more than 20 international conferences. Prof. Anjum has been a member of the technical program committees for more than 40 international conferences. He is the member of British Computer Society, IEEE, ACE, and SIGHPC. He is the Fellow of Higher Education Academy and the champion of European Grid Infrastructure.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "annex"
        }
    ]
}